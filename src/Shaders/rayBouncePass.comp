#version 450

#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "core/system.glsl"
#include "struct_cpp.glsl"

layout(set = 0, binding = g_outputImage_bind, rgba16f) uniform writeonly image2D g_outputImage;
layout(set = 0, binding = g_inputImage_bind, rgba16f) uniform readonly image2D g_inputImage;

layout(push_constant) uniform pushConstantBlock
{
    PushConstants g_Constants;
};

layout(std140, set = 0, binding = g_PassData_bind)
uniform PassData_block
{
    PassData g_passData;
};

layout(std430, binding = g_InRayBuffer_bind) readonly buffer g_InReflexionRayBuffer_bind_layout
{
    IndirectLightRay g_inReflexionRays[];
};

layout(set = 0, binding = g_lpfTextures_bind, rgba16f) uniform readonly image3D g_lpfTextures[7];
#include "lightprob/fetchSH_inline.glsl"

#include "baseRaytracingPass.glsl"
#include "rayStorageHelpers.glsl"

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE) in;
void main()
{
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.x, gl_NumWorkGroups.y * LOCAL_SIZE - gl_GlobalInvocationID.y);
    if (pixelCoord.x < g_passData.frameSize.x && pixelCoord.y < g_passData.frameSize.y)
    {
        if (g_inReflexionRays[rayIndexFromCoord()].pos.w > 0)
        {
            ClosestHit closestHit;
            Ray ray = createRay(g_inReflexionRays[rayIndexFromCoord()].pos.xyz, normalize(g_inReflexionRays[rayIndexFromCoord()].dir.xyz));
            vec3 lightAbsorbdeByPrevBounce = g_inReflexionRays[rayIndexFromCoord()].lit.xyz;
            
            rayTrace(ray, closestHit) * lightAbsorbdeByPrevBounce;

            SunDirColor sun;
		    sun.sunDir = g_passData.sunDir.xyz;
		    sun.sunColor = g_passData.sunColor.xyz;

		    LightProbFieldHeader lpfHeader;
		    lpfHeader.aabb.minExtent = g_passData.sceneMinExtent.xyz;
		    lpfHeader.aabb.maxExtent = g_passData.sceneMaxExtent.xyz;
		    lpfHeader.resolution = g_passData.lpfResolution.xyz;

		    vec3 lit = computeLighting(sun, lpfHeader, ray, closestHit);

            vec4 curFrag = imageLoad(g_inputImage, pixelCoord);
            imageStore(g_outputImage, pixelCoord, vec4(lit + curFrag.xyz, 1));
            nextBounce(lightAbsorbdeByPrevBounce, closestHit, ray);
        }
    }
}