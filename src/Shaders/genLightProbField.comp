#version 450
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

//#undef USE_LPF
//#define IGNORE_BACKFACE

#include "core/system.glsl"
#include "struct_cpp.glsl"
#include "lightprob/lightprob.glsl"

layout(push_constant) uniform pushConstantBlock
{
	PushConstants g_Constants;
};

layout(std430, set=0, binding = g_CstBuffer_bind)
uniform CstBuffer_block
{
	GenLightProbFieldConstants g_lpfCst;
};

layout(std430, binding = g_outputBuffer_bind) writeonly buffer OutputLayout
{
    float g_irradiance[];
};

layout(set = 0, binding = g_lpfTextures_bind, rgba16f) uniform readonly image3D g_lpfTextures[7];
#include "lightprob/fetchSH_inline.glsl"

#include "baseRaytracingPass.glsl"
#include "lightprob/lightprobHelpers.glsl"

layout (local_size_x = UPDATE_LPF_NUM_PROBS_PER_GROUP) in;
void main()
{
	uint probBatchId = gl_WorkGroupID.x;
	uint rayId = gl_WorkGroupID.y;
    uint probIndex = gl_LocalInvocationID.x + UPDATE_LPF_NUM_PROBS_PER_GROUP * probBatchId;

	Box lpfAABB;
	lpfAABB.minExtent = g_lpfCst.lpfMin.xyz;
	lpfAABB.maxExtent = g_lpfCst.lpfMax.xyz;

	uvec3 probCoord = getLightProbCoord(probIndex, g_lpfCst.lpfResolution.xyz);
	vec3 probPosition = getLightProbPosition(probCoord, g_lpfCst.lpfResolution.xyz, lpfAABB);

	ClosestHit closestHit;
	Ray ray = createRay(probPosition, g_lpfCst.rays[rayId].xyz);

	rayTrace(ray, closestHit);

	SunDirColor sun;
	sun.sunDir = g_lpfCst.sunDir.xyz;
	sun.sunColor = g_lpfCst.sunColor.xyz;

	LightProbFieldHeader lpfHeader;
	lpfHeader.aabb.minExtent = g_lpfCst.lpfMin.xyz;
	lpfHeader.aabb.maxExtent = g_lpfCst.lpfMax.xyz;
	lpfHeader.resolution = g_lpfCst.lpfResolution.xyz;

    vec3 lit = computeLighting(sun, lpfHeader, ray, closestHit);

	uint sampleIndex = (probIndex * NUM_RAYS_PER_PROB + rayId) * 3;
	g_irradiance[sampleIndex + 0] = lit.x;
	g_irradiance[sampleIndex + 1] = lit.y;
	g_irradiance[sampleIndex + 2] = lit.z;
}