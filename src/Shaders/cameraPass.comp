#version 450

#extension GL_EXT_scalar_block_layout : enable

#include "system.fxh"
#include "struct_cpp.fxh"
#include "collision.fxh"
#include "lighting.fxh"

layout(std430, set=0, binding = g_PassData_bind)
uniform PassData_block
{
	PassData g_passData;
};

layout(std430, set = 0, binding = g_BvhPrimitives_bind) buffer BvhPrimitives
{
	PackedPrimitive g_BvhPrimitiveData[];
};

layout(std430, set = 0, binding = g_BvhMaterials_bind) buffer BvhMaterials
{	
	Material g_BvhMaterialData[];
};

layout(std430, set = 0, binding = g_BvhLights_bind) buffer BvhLights
{
	PackedLight g_BvhLightData[];
};

layout(std430, set = 0, binding = g_BvhNodes_bind) buffer BvhNodes
{
	PackedBVHNode g_BvhNodeData[];
};

layout(std430, set = 0, binding = g_BvhLeafData_bind) buffer BvhLeafData
{
	uint g_BvhLeafData[];
};

layout(set=0, binding = g_outputImage_bind) uniform writeonly image2D g_outputImage;

layout(push_constant) uniform pushConstantBlock
{
	PushConstants g_Constants;
};

#if USE_SHARED_MEM
shared vec3 g_normalHit[LOCAL_SIZE * LOCAL_SIZE];
#endif

#include "bvhTraversal.fxh"
#include "bvhGetter.fxh"
#include "bvhCollision.fxh"
#include "bvhLighting.fxh"
#include "cullFrustum.fxh"

#if !TILE_FRUSTUM_CULL
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE) in;
void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.x, gl_NumWorkGroups.y * LOCAL_SIZE - gl_GlobalInvocationID.y);
	if(pixelCoord.x < g_passData.frameSize.x && pixelCoord.y < g_passData.frameSize.y)
	{	
		vec3 stepW = (g_passData.frustumCorner10.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.x;
		vec3 stepH = (g_passData.frustumCorner01.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.y;

		vec3 rayTarget = g_passData.frustumCorner00.xyz + stepW * gl_GlobalInvocationID.x + stepH * gl_GlobalInvocationID.y;

		Ray ray = createRay(g_passData.cameraPos.xyz, normalize(rayTarget - g_passData.cameraPos.xyz));

		ClosestHit closestHit;
		closestHit.t = TMAX;
		closestHit.nid_mid = 0xFFFFffff;
		uint rootId = g_Constants.numNodes == 1 ? 0x8000 : 0;

	#if NO_BVH
		brutForceTraverse(ray, closestHit);
	#else
		traverseBvh(ray, rootId, closestHit);
	#endif
		
		vec3 pixelColor = vec3(0,0,0);
		if(closestHit.t < TMAX)
		{
		#if NO_BVH
			for(uint i=0 ; i<g_Constants.numLights ; ++i)
				pixelColor += evalLighting(rootId, i, closestHit.nid_mid, ray, closestHit);
		#else
			pixelColor = computeDirectLighting(rootId, ray, closestHit);
		#endif
		}
		
		imageStore(g_outputImage, pixelCoord, fromLinear(vec4(pixelColor, 1)));
	}
}
#endif

#if TILE_FRUSTUM_CULL
layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE) in;
void main()
{
	cullWithFrustumTile(g_passData, g_Constants);

	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.x, gl_NumWorkGroups.y * LOCAL_SIZE - gl_GlobalInvocationID.y);
	if(pixelCoord.x < g_passData.frameSize.x && pixelCoord.y < g_passData.frameSize.y)
	{	
		vec3 stepW = (g_passData.frustumCorner10.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.x;
		vec3 stepH = (g_passData.frustumCorner01.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.y;

		vec3 rayTarget = g_passData.frustumCorner00.xyz + stepW * gl_GlobalInvocationID.x + stepH * gl_GlobalInvocationID.y;

		Ray ray = createRay(g_passData.cameraPos.xyz, normalize(rayTarget - g_passData.cameraPos.xyz));

		ClosestHit closestHit;
		closestHit.t = TMAX;
		closestHit.nid_mid = 0xFFFFffff;
		uint rootId = g_Constants.numNodes == 1 ? 0x8000 : 0;

		collideRayAgainstTileData(ray, closestHit);
		
		vec3 pixelColor = vec3(0,0,0);
		if(closestHit.t < TMAX)
		{
			for(uint i=0 ; i<g_Constants.numLights ; ++i)
				pixelColor += evalLighting(rootId, i, closestHit.nid_mid, ray, closestHit);
		}
		
		imageStore(g_outputImage, pixelCoord, fromLinear(vec4(pixelColor, 1)));
	}
}
#endif