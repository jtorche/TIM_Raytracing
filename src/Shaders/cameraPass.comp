#version 450
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_nonuniform_qualifier : enable

// #define NO_LPF
// #define IGNORE_BACKFACE
#define NUM_THREADS_PER_GROUP (LOCAL_SIZE*LOCAL_SIZE)

#include "core/system.glsl"
#include "bvh/bvhBindings_cpp.glsl"
#include "struct_cpp.glsl"

layout(std430, set=0, binding = g_PassData_bind)
uniform PassData_block
{
	PassData g_passData;
};

layout(std430, set = 0, binding = g_tracingResult_bind) buffer TracingResult
{
	uvec4 g_tracingData[];
};

layout(set=0, binding = g_outputImage_bind, rgba16f) uniform writeonly image2D g_outputImage;

layout(push_constant) uniform pushConstantBlock
{
	PushConstants g_Constants;
};

layout(set = 0, binding = g_lpfTextures_bind, rgba16f) uniform readonly image3D g_lpfTextures[7];
#include "lightprob/fetchSH_inline.glsl"

#include "baseRaytracingPass.glsl"
#include "rayStorageHelpers.glsl"
#include "cullFrustum.glsl"

void raytraceLightProbFieldDebug(in Ray _ray, inout ClosestHit _hitResult);

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE) in;
void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.x, gl_NumWorkGroups.y * LOCAL_SIZE - gl_GlobalInvocationID.y);
	
	if(pixelCoord.x < g_passData.frameSize.x && pixelCoord.y < g_passData.frameSize.y)
	{	
		vec3 stepW = (g_passData.frustumCorner10.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.x;
		vec3 stepH = (g_passData.frustumCorner01.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.y;

		vec3 rayTarget = g_passData.frustumCorner00.xyz + stepW * gl_GlobalInvocationID.x + stepH * gl_GlobalInvocationID.y;
        Ray ray = createRay(g_passData.cameraPos.xyz, normalize(rayTarget - g_passData.cameraPos.xyz));

		uint pixelId = g_passData.frameSize.x * pixelCoord.y + pixelCoord.x;

		SunDirColor sun;
		sun.sunDir = g_passData.sunDir.xyz;
		sun.sunColor = g_passData.sunColor.xyz;
	
		LightProbFieldHeader lpfHeader;
		lpfHeader.aabb.minExtent = g_passData.sceneMinExtent.xyz;
		lpfHeader.aabb.maxExtent = g_passData.sceneMaxExtent.xyz;
		lpfHeader.resolution = g_passData.lpfResolution.xyz;
		lpfHeader.step = computeLpfStep(lpfHeader.resolution, lpfHeader.aabb);

	#ifdef TRACING_STEP
		ClosestHit closestHit;
		uint numTraversal = rayTrace(ray, closestHit);

		g_tracingData[pixelId * 2] = ClosestHit_getHitData(closestHit);
		g_tracingData[pixelId * 2 + 1].xy = computeAdditionalHitData(ray, closestHit, sun, lpfHeader);

		#if ANY_DEBUG
		vec3 lit = applyDebugLighting(ray, closestHit, numTraversal);
		imageStore(g_outputImage, pixelCoord, vec4(lit, 1));
		#endif
	#elif !ANY_DEBUG
		Triangle tri = unpackTriangle(g_tracingData[pixelId * 2].xyz);
		float t = uintBitsToFloat(g_tracingData[pixelId * 2].w);

	//#if SHOW_LPF_DEBUG
	//	raytraceLightProbFieldDebug(ray, closestHit);
	//#endif
		
		uint shadowMask = g_tracingData[pixelId * 2 + 1].x;
		vec3 lit = computeLighting(sun, lpfHeader, shadowMask, ray, t, tri);
		imageStore(g_outputImage, pixelCoord, vec4(lit, 1));
        //nextBounce(vec3(1,1,1), closestHit, ray);
	#endif
	}
}

//void raytraceLightProbFieldDebug(in Ray _ray, inout ClosestHit _closestHit)
//{
//	LightProbFieldHeader lpfHeader;
//	lpfHeader.aabb.minExtent = g_passData.sceneMinExtent.xyz;
//	lpfHeader.aabb.maxExtent = g_passData.sceneMaxExtent.xyz;
//	lpfHeader.resolution = g_passData.lpfResolution.xyz;
//
//	uint numProb = lpfHeader.resolution.x * lpfHeader.resolution.y * lpfHeader.resolution.z;
//	for(uint i = 0 ; i < numProb ; ++i)
//	{
//		ivec3 coord = getLightProbCoord(i, lpfHeader.resolution);
//		vec3 pos = getLightProbPosition(coord, lpfHeader.resolution, lpfHeader.aabb);
//		Sphere sphere;
//		sphere.center = pos;
//		sphere.radius = LPF_DEBUG_SIZE;
//		sphere.invRadius = 1.0 / LPF_DEBUG_SIZE;
//
//		float t = CollideSphere(_ray, sphere, _closestHit.t);
//		if(t < TMAX)
//		{
//			_closestHit.t			= t - OFFSET_RAY_COLLISION;
//
//			ClosestHit_storeNid(_closestHit, 0xFFFFffff);
//			ClosestHit_setDebugColorId(_closestHit, i);
//		}
//	}
//}