#version 450
#extension GL_EXT_scalar_block_layout : enable

#include "system.glsl"
#include "struct_cpp.glsl"

layout(std430, set=0, binding = g_PassData_bind)
uniform PassData_block
{
	PassData g_passData;
};

layout(set=0, binding = g_outputImage_bind, rgba8) uniform writeonly image2D g_outputImage;

layout(push_constant) uniform pushConstantBlock
{
	PushConstants g_Constants;
};

#include "baseRaytracingPass.glsl"
#include "rayStorageHelpers.glsl"
#include "cullFrustum.glsl"

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE) in;
void main()
{
#if !TILE_FRUSTUM_CULL
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.x, gl_NumWorkGroups.y * LOCAL_SIZE - gl_GlobalInvocationID.y);
	if(pixelCoord.x < g_passData.frameSize.x && pixelCoord.y < g_passData.frameSize.y)
	{	
		vec3 stepW = (g_passData.frustumCorner10.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.x;
		vec3 stepH = (g_passData.frustumCorner01.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.y;

		vec3 rayTarget = g_passData.frustumCorner00.xyz + stepW * gl_GlobalInvocationID.x + stepH * gl_GlobalInvocationID.y;

		ClosestHit closestHit;
        Ray ray = createRay(g_passData.cameraPos.xyz, normalize(rayTarget - g_passData.cameraPos.xyz));
        vec3 lit = rayTrace(ray, closestHit);
		
		imageStore(g_outputImage, pixelCoord, vec4(lit, 1));
        nextBounce(closestHit.objectId, getMaterialId(closestHit), lit, getHitNormal(closestHit), ray, closestHit.t);
	}
#else

	cullWithFrustumTile(g_passData, g_Constants);

	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.x, gl_NumWorkGroups.y * LOCAL_SIZE - gl_GlobalInvocationID.y);
	if(pixelCoord.x < g_passData.frameSize.x && pixelCoord.y < g_passData.frameSize.y)
	{	
		vec3 stepW = (g_passData.frustumCorner10.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.x;
		vec3 stepH = (g_passData.frustumCorner01.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.y;

		vec3 rayTarget = g_passData.frustumCorner00.xyz + stepW * gl_GlobalInvocationID.x + stepH * gl_GlobalInvocationID.y;

		Ray ray = createRay(g_passData.cameraPos.xyz, normalize(rayTarget - g_passData.cameraPos.xyz));

		ClosestHit closestHit;
		closestHit.t = TMAX;
		closestHit.nid_mid = 0xFFFFffff;
		uint rootId = g_Constants.numNodes == 1 ? 0x8000 : 0;

		collideRayAgainstTileData(ray, closestHit);
		
		vec3 lit = vec3(0,0,0);
		if(closestHit.t < TMAX)
		{
			for(uint i=0 ; i<g_lightCount ; ++i)
                lit += evalLighting(rootId, g_lights[i], closestHit.nid_mid, ray, closestHit);
		}
		
		imageStore(g_outputImage, pixelCoord, vec4(lit, 1));
        nextBounce(closestHit.objectId, closestHit.nid_mid, lit, getHitNormal(closestHit), ray, closestHit.t);
	}
#endif
}