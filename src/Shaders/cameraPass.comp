#version 450

#extension GL_EXT_scalar_block_layout : enable

#include "system.fxh"
#include "struct_cpp.fxh"
#include "collision.fxh"
#include "bvhTraversal.fxh"
#include "lighting.fxh"

layout(std430, set=0, binding = g_PassData_bind)
uniform PassData_block
{
	PassData g_passData;
};

layout(std430, set = 0, binding = g_BvhPrimitives_bind) buffer BvhPrimitives
{
	PackedPrimitive g_BvhPrimitiveData[];
};

layout(std430, set = 0, binding = g_BvhLights_bind) buffer BvhLights
{
	PackedLight g_BvhLightData[];
};

layout(std430, set = 0, binding = g_BvhNodes_bind) buffer BvhNodes
{
	PackedBVHNode g_BvhNodeData[];
};

layout(std430, set = 0, binding = g_BvhLeafData_bind) buffer BvhLeafData
{
	uint g_BvhLeafData[];
};

layout(set=0, binding = g_outputImage_bind) uniform writeonly image2D g_outputImage;

layout(push_constant) uniform pushConstants 
{
	uint numPrimitives;
	uint numNodes;
} g_Constants;

#include "bvhGetter.fxh"
#include "bvhCollision.fxh"

vec3 computeDirectLighting(uint rootId, Ray _ray, Hit _hit)
{
	uint leafDataOffset = g_BvhNodeData[_hit.nid].nid.z;
	uint packed = g_BvhNodeData[_hit.nid].nid.w;
	uint numObjects = packed & 0xFFFF;
	uint numLights = (packed & 0xFFFF0000) >> 16;

	vec3 totalLight = vec3(0,0,0);
	for(uint i=0 ; i<numLights ; ++i)
	{
		uint lightIndex = g_BvhLeafData[leafDataOffset + numObjects + i];
		switch(g_BvhLightData[lightIndex].iparam)
		{
			case Light_Point:
			totalLight += evalPointLight(rootId, loadPointLight(lightIndex), _ray.from + _ray.dir * _hit.t, _hit.normal, vec3(0,0,0));
			break;
			case Light_Sphere:
			totalLight += evalSphereLight(rootId, loadSphereLight(lightIndex), _ray.from + _ray.dir * _hit.t, _hit.normal, vec3(0,0,0));
			break;
			case Light_Area:
			totalLight += evalAreaLight(rootId, loadAreaLight(lightIndex), _ray.from + _ray.dir * _hit.t, _hit.normal, vec3(0,0,0));
			break;
		}
	}

	return totalLight;
}

layout (local_size_x = 16, local_size_y = 16) in;
void main()
{
	ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.x, gl_NumWorkGroups.y * 16 - gl_GlobalInvocationID.y);
	if(pixelCoord.x < g_passData.frameSize.x && pixelCoord.y < g_passData.frameSize.y)
	{	
		imageStore(g_outputImage, pixelCoord, vec4(0.5, 0.5, 0.5, 1));
		vec3 stepW = (g_passData.frustumCorner10.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.x;
		vec3 stepH = (g_passData.frustumCorner01.xyz - g_passData.frustumCorner00.xyz) * g_passData.invFrameSize.y;
		
		vec3 rayTarget = g_passData.frustumCorner00.xyz + stepW * gl_GlobalInvocationID.x + stepH * gl_GlobalInvocationID.y;

		Ray ray = createRay(g_passData.cameraPos.xyz, normalize(rayTarget - g_passData.cameraPos.xyz));

		Hit closestHit;
		closestHit.t = TMAX;
		closestHit.nid = 0xFFFFffff;

		// brutForceTraverse(ray, closestHit);
		uint rootId = g_Constants.numNodes == 1 ? 0x8000 : 0;
		traverseBvh(ray, rootId, closestHit);

		if(closestHit.t < TMAX)
		{
			vec3 color = computeDirectLighting(rootId, ray, closestHit);
			imageStore(g_outputImage, pixelCoord, fromLinear(vec4(color, 1)));
		}
		else
		    imageStore(g_outputImage, pixelCoord, vec4(0,0,0, 1));
	}
}

